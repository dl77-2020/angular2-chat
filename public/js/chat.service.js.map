{"version":3,"sources":["chat.service.ts"],"names":[],"mappings":"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","file":"chat.service.js","sourcesContent":["// Import all of our dependencies\nimport {Injectable} from 'angular2/core';\n\n// Define the interfaces for the data types we are working with.\nexport interface Server {\n  loading: boolean,   //has the service loaded\n  connected: boolean, //has a socket connection established\n  joined: boolean,    //has the user joined the chat\n  online: string      //names of users currently in the chat\n}\nexport interface User {\n  name: string        //the name of the user\n} \nexport interface Message {\n  isStatus: boolean,  //is this a status message or a user message\n  isOwn: boolean,     //is this message created by the current user\n  user: string,       //name of the user this message belongs to\n  message: string     //the actual text of the message\n}\n\n// Use the @Injectable Decorator to define the following class as a injectable service \n@Injectable()\nexport class ChatService {\n  //CLASS PROPERTIES\n  socket;\n  server:Server = {\n    loading: true,\n    connected: false,\n    joined: false,\n    online: \"\"\n  }\n  user: User = { name: \"Anon\" };\n  messages : Message[] = [];\n\n  //property accessor functions\n  getServer(){\n    return this.server;\n  }\n  getMessages(){\n    return this.messages;\n  }\n  \n  //CLASS METHODS\n  constructor() {\n    //connect the socket.io client to our webserver (assuming it's running on the same port)\n    this.socket = io(window.location.host); \n\n    var self = this;\n    // ADD SOCKET EVENT LISTENERS\n    //handle connectting to and disconnecting from the chat server\n    this.socket.on(\"connect\", () => {\n      console.log(\"Connected to Chat Socket\");\n      this.server.loading = false;\n      this.server.connected = true;\n    });\n    this.socket.on(\"disconnect\", () => {\n      console.log(\"Disconnected from Chat Socket\");\n      this.server.connected = false;\n      this.server.joined = false;\n      //set array length to 0 to empty the array of past messages\n      this.messages.length = 0; \n    });\n\n    //welcome message received from the server\n    this.socket.on(\"welcome\", (msg) => {\n      console.log(\"Received welcome message: \", msg);\n      this.server.joined = true;\n      //use unshift to add new messages to the front of the array and they can be displayed in order\n      this.messages.unshift({\n        isStatus: true,\n        isOwn: false,\n        user: \"\",\n        message: msg\n      });\n    });\n\n    //chat message from another user\n    this.socket.on(\"chat\", (msg) => {\n      console.log(\"Received message: \", msg);\n      this.messages.unshift({\n        isStatus: false,\n        isOwn: false,\n        user: msg.user.name,\n        message: msg.message\n      });\n    });\n\n    //message received that new user has joined the chat\n    this.socket.on(\"joined\", (user) => {\n      console.log(user.name + \" joined the chat.\");\n      this.messages.unshift({\n        isStatus: true,\n        isOwn: false,\n        user: user.name,\n        message: ` ${user.name} joined the chat.`\n      });\n    });\n\n    //handle leaving message\n    this.socket.on(\"left\", (user) => {\n      console.log(user.name + \" left the chat.\");\n      this.messages.unshift({\n        isStatus: true,\n        isOwn: false,\n        user: user.name,\n        message: ` ${user.name} left the chat.`\n      });\n    });\n\n    //keep track of who is online\n    this.socket.on(\"online\", (connections) => {\n      console.log(\"Connections: \", connections);\n      this.server.online = \"\";\n      for (var i=0; i< connections.length; ++i){\n        if ( connections[i].user ) {\n          if ( i > 0 ) {\n            if ( i == connections.length -1 ) this.server.online += \" and \";\n            else this.server.online += \", \";\n          }\n          this.server.online += connections[i].user.name;\n        }\n      }\n    });\n  }\n\n  //handle form submission for joining the chat\n  joinChat(name){\n    console.log(\"Joining chat with name: \", name);\n\n    this.user = { name: name }\n    this.socket.emit(\"join\", this.user );\n  }\n  \n  //handle form submission for sending a chat message \n  sendMessage(message) {\n    console.log(\"Sending message: \", message);\n    this.socket.emit(\"chat\", message );\n    //add user's own message to the message array\n    this.messages.unshift({\n      isStatus: false,\n      isOwn: true,\n      user: this.user.name,\n      message: message\n    });\n  }\n}\n"],"sourceRoot":"/source/"}